#!/usr/bin/php
<?php
#!/usr/bin/env php

class CLI {

    //------------------------------------------------------------------------------
    //  colored output / CliUI
    //------------------------------------------------------------------------------

    // ForeGround colors
    static $a_fg = [
        'black' => '0;30',
        'dark_gray' => '1;30',
        'blue' => '0;34',
        'light_blue' => '1;34',
        'green' => '0;32',
        'light_green' => '1;32',
        'cyan' => '0;36',
        'light_cyan' => '1;36',
        'red' => '0;31',
        'light_red' => '1;31',
        'purple' => '0;35',
        'light_purple' => '1;35',
        'brown' => '0;33',
        'yellow' => '1;33',
        'light_gray' => '0;37',
        'white' => '1;37',
        // Bold
        'bblack' => '1;30',
        'bred' => '1;31',
        'bgreen' => '1;32',
        'byellow' => '1;33',
        'bblue' => '1;34',
        'bpurple' => '1;35',
        'bcyan' => '1;36',
        'bwhite' => '1;37',
    ];

    // background
    static $a_bg = [
        'black' => '40',
        'red' => '41',
        'green' => '42',
        'yellow' => '43',
        'blue' => '44',
        'magenta' => '45',
        'cyan' => '46',
        'light_gray' => '47',
    ];

    // usa FG o BG
    public static function getColoredString($str, $foreground_color = '', $background_color = '') {
        $s = '';
        // FG color
        if (isset(self::$a_fg[$foreground_color])) {
            $s .= "\e[" . self::$a_fg[$foreground_color] . 'm';
        }
        // BG color
        if (isset(self::$a_bg[$background_color])) {
            $s .= "\033[" . self::$a_bg[$background_color] . 'm';
        }
        $s .= $str . "\033[0m";
        return $s;
    }
    // stampa stringa colorata
    public static function printc($str, $foreground_color = 'green') {
        echo self::getColoredString($str, $foreground_color) . "\n";
    }
}


/*
collezione di comandi richiamabili da cli

TODO:
- ricerca nel wiki se non trova in locale

*/

class Command {
    function __construct($cmd, $description = '') {
        $this->cmd = $cmd;
        $this->description = $description;
    }
    //
    function __toString() {
        return sprintf("%s\n%s", $this->cmd,
            (
                !empty($this->description) ?
                sprintf('description:%s', $this->description) :
                ''
            )
        );
    }
}
// stampa key che sono alias
class Alias extends Command {
    function __toString() {
        return sprintf("Alias @see %s", $this->cmd  );
    }
}

$commands = [

//----------------------------------------------------------------------------
//  bash basics
//----------------------------------------------------------------------------
    'bash_while' => new Command('while [ 1 ]; do  cmd;  done', ''),
    'bash_for' => new Command('for i in {A..C} "label:" {1..3}; do echo $i; done', ''),
    'bash_allargs' => 'java com.myserver.Program "$@"',
    'bash_io_redirect' => '
# Redirect stdout to file
1> filename.txt

# Redirect and append stdout to file
1>> filename.txt

# Redirect stderr to file
2> filename.txt

# Redirect and append stderr to file
2>> filename.txt

# Redirect both stdout and stderr to file
&> filename ',

    'date_log' => new Command('>> /var/www/app/logs/module/program_`date +"%F"`.log', ''),

//----------------------------------------------------------------------------
//  linux basic commands
//----------------------------------------------------------------------------
    'grep' => new Command('grep -e $PATTERN -f $FILE ', ''),
    'find' => new Command('find $dir -type f -name ', ''),
    'find_delete' => new Command('find $dir -maxdepth 1 -type f -mtime +30 -delete \; ', ''),
    'img_resize' => new Command('convert myfigure.png -resize 200x100 myfigure.jpg', ''),
    'imagemagick' => new Alias('img_resize'),

    'compress.zip' => new Command('zip -9 -j -r $zip_file $folder_name', ''),
    'extract.unzip' => new Command('unzip $zip_file -d $destination_folder', ''),

    'compress.bzip' => new Command('bzip2 -zkfq --best $filename'),

    'compress.tar.gz' => new Command('tar -zcvf archive.tar.gz directory/ ', ''),
    'extract.tar.gz' => new Command('tar -xzfv archive.tar.gz', ''),

    'compress.gzip' => new Command('cat $file | gzip > file.gz', ''),
    'extract.gunzip' => new Command('gunzip file.gz   ', ''),

    'dictionary' => new Command('loook word  ', 'cerca una parola nel dizionario del sistema'),

    'user_add_group' => new Command('sudo usermod -a -G www-data  $user', ''),
    'sudo_wwwdata' => new Command('sudo -u www-data bin/$script $param', ''),

    'tee' => new Command('ls -la / | tee /tmp/out.log', 'duplicate output to file e STDOUT'),
    'ubuntu_version' => new Command('lsb_release -cds', ''),
    'hostname' => new Command('hostname -f', ''),

    'gpg' => new Command('gpg -c your_file.odt
gpg your_file.odt.gpg
echo $your_password | gpg --passphrase-fd 0 --batch --yes --no-tty your_file.gpg' , ''),


    'awk' => new Command("ls -lh | awk '{ print $2 }'",''),
    'sed' => new Command("sed -i 's/ugly/beautiful/g' /home/usr/test/test.txt",''),
    'count_lines' => new Command("wc -l",''),

    'crontab' => new Command(" 0 23 * * * root  /usr/local/bin/command", ''),

    'apt_installed' => new Command('sudo apt list --installed | grep php7.0 ', ''),
    'apt_list'      => new Command('sudo apt-cache search php7-*', ''),
    'ufw'           => new Command('sudo ufw allow 80/tcp'),
    'cron_log'      => new Command('grep -i CRON /var/log/syslog'),





    //----------------------------------------------------------------------------
    //  mysql commands
    //----------------------------------------------------------------------------
    'mysql_dump' => new Command('mysqldump -u user --p=$password $dbname > $backup_db_file', ''),
    'mysql_restore' => new Command('mysql -u user --p=$password $dbname < $backup_db_file', ''),

    //----------------------------------------------------------------------------
    // network commands
    //----------------------------------------------------------------------------
    'scp_upload' => new Command('sshpass -p "$pass" scp $l_path tmirandola@$host:$r_path',''),
    'scp_download' => new Command('sshpass -p "$pass" scp tmirandola@$host:$r_path $l_path',''),
    'youtube-dl' => new Command('
# aggiornare sempre all ultima versione
sudo youtube-dl -U
youtube-dl -x --audio-format mp3   https://www.youtube.com/watch?v=3kW99COiygw
'),
    'ffmpeg' => new Command('
# mv resulting video to home
mv Game\ of\ Thrones\ soundtrack\;\ Cellocyl\ 2014-6pDlHdcfKbo.webm ~/Desktop/GoTSoundtrack.webm
ffmpeg -i ~/Desktop/GoTSoundtrack.webm -acodec libmp3lame -aq 4  ~/Desktop/GoTSoundtrack.mp3
mpg123  ~/Desktop/GoTSoundtrack.mp3
    '),
    'curl' => new Command('curl -I -d "method=Say.Hello" http://www.google.com', ''),
    'wget' => new Command('wget -l 1 -v -k -p -E http://test.com/test', 'mirror completo di un sito'),
    'nethogs' => new Command('sudo nethogs wlan0', 'conoscere i processi che stanno utilizzando la nostra connessione'),

    'rsync_push' => new Command('rsync -v $cmd_dry_run --archive --cvs-exclude --compress --stats --progress --human-readable --force --delete --no-perms --no-owner --no-group $exclude  --rsh \"ssh -p22\" $local_path $user@$host:$remote_path','upload di tutta la directory (PUSH)'),
    'rsync_pull' => new Command('rsync -v --compress --rsh ssh user@host:/path/to/local/file.txt /path/to/remote/file.txt', 'remote to local (PULL)'),
    'rsync_local' => new Command('rsync -v --archive --compress --delete /local_path_A/ /local_path_B', 'sincronizza in modo efficiente directory locali'),


    //----------------------------------------------------------------------------
    //  sysadmin
    //----------------------------------------------------------------------------

    'logrotate' => new Command('
sudo vi /etc/logrotate.d/appname.log
/var/log/appname.log {
        rotate 2
        weekly
        size 250k
        compress
} ', 'log rotate'),

    //----------------------------------------------------------------------------
    //  dev specific commands
    //----------------------------------------------------------------------------
    // pfff tools
    'bower' => new Command('bower install --save $lib_name', ''),
    'php_grep' => new Command("sgrep -e 'array(...)' /var/www/dir/", ''),

    // GIT
    'git_log' => new Command("git log --after=2015-05-01 --pretty=format:'%s'", ''),
    'git_remote_url' => new Command('git config --get remote.origin.url', ''),
    'git_branch' => new Command('git checkout -b iss53', ''),
    'git_merge' => new Command('git merge iss53', ''),
    'git_switch_to_master' => new Command('git checkout master', ''),
    'git_reset_file' => new Command('git checkout --theirs $file_name', ''),

    'ctags' => new Command('ctags -R --languages=PHP', ''),
    'composer' => new Command('composer require predis/predis', ''),

    'redis' => new Command('redis-cli
set test test1
get test
keys user:* # le chiavi che rispondono alla regex
del test
    ', ''),

    'wiki_serach' => new Command('/home/taz/Dropbox/mywebsite/evidenceweb/bin/tool wiki:search wget', 'cerca informazioni nel wiki'),
];

function action_usage($argv) {
    return <<<__END__
uso:
    {$argv[0]} list => list keys
    {$argv[0]} [key]
il primo argomento viene utilizzato per cercare un comando nel dizionario
__END__;
}
//------------------------------------------------------------------------------
//  main
//------------------------------------------------------------------------------
$action = isset($argv[1]) ? $argv[1] : '';
$action = strtolower($action);
if (empty($action)) {
    die(action_usage($argv));
} else {
    if ("list" == $action) {
        foreach (array_keys($commands) as $key) {
            echo "$key \n";
        }
    } elseif (isset($commands[$action])) {
        // exact match
        // echo "astring" | xclip  -selection clipboard
        // shift+ins per fare paste
        //$cmd_str = $commands[$action]->cmd;
        //echo " echo \"$cmd_str\" | xclip -i "."\n\n";

        echo CLI::printc(  $commands[$action] . "\n" );
    } else {
        $str_search = $action;
        echo "searching:\n";
        foreach (array_keys($commands) as $key) {
            if (false !== strpos( $key, $str_search   )) {
                echo CLI::printc("substr: '$str_search' found in '$key' \n");
            }
        }
        echo process_lev(array_keys($commands), $str_search );
        echo "usa:\n".
        "memory wiki_serach \n".
        "per cercare nel WIKI";
    }
}

function process_lev($words,$input){
    // no shortest distance found, yet
    $shortest = -1;

    // loop through words to find the closest
    foreach ($words as $word) {

        // calculate the distance between the input word,
        // and the current word
        $lev = levenshtein($input, $word);

        // check for an exact match
        if ($lev == 0) {

            // closest word is this one (exact match)
            $closest = $word;
            $shortest = 0;

            // break out of the loop; we've found an exact match
            break;
        }

        // if this distance is less than the next found shortest
        // distance, OR if a next shortest word has not yet been found
        if ($lev <= $shortest || $shortest < 0) {
            // set the closest match, and shortest distance
            $closest  = $word;
            $shortest = $lev;
        }
    }

    if ($shortest == 0) {
        // questo caso è gestito da substr
        // echo "Exact match found: $closest\n";
    } else {
        return "LEVENSHTEIN for '$input':  ".CLI::printc($closest)."\n";
    }
}
