#!/usr/bin/php
<?php
declare (strict_types = 1);
require_once __DIR__ . '/Utils.php';
// ensure the command is porperly indented
function indent($txt, $s_evidenzia = '') {
    // object stringify
    if (!is_string($txt)) {
        if (method_exists($txt, '__toString')) {
            $txt = $txt->__toString();
        } else {
            echo sprintf("<pre>%s() L:%s F:%s\n", __FUNCTION__, __LINE__, __FILE__), var_dump(
                $txt
            ), "</pre>\n";
            echo implode("\n", get_class_methods($txt));
            die(); // debug_print_backtrace()
        }
    }
    $txt2 = '';
    $a_lines = explode("\n", $txt);
    foreach ($a_lines as $i => &$l) {
        $l = trim($l);
        if (empty($l)) {
            continue;
        }
        $l = "    " . trim($l);
        if (!empty($s_evidenzia) && str_contains($l, $s_evidenzia)) {
            $l = str_highlight(
                $l,
                $s_evidenzia,
                $replacement = CLI::getColoredString('${0}') // '<< ${0} >>'
            );
        }
    }
    $txt2 = implode("\n", array_filter($a_lines));
    return $txt2;
}
function hr() {
    echo str_repeat('-', 80) . "\n";
}
/*
- Exact matches always come first. If the user types in an option exactly, other options must always go below the one matching what they typed.
- Besides exact matches, prefix matches come first. If I type “Fr” I want “Fresno” not “San Francisco.”
- After prefix matches, it can fall back to substring matches. Starting with substring matches would almost always be the wrong thing to do since users start typing words at the beginning not somewhere in the middle.
- If there are no substring matches, it can optionally fall back to subsequence matching. This is only useful in some cases.
- If there are no subsequence/substring matches, it can optionally fall back to approximate matches(fuzzy string searching, Levenshtein distance). This is rarely necessary to provide.
- Matches should be sorted alphabetically.
- When one option is the prefix of another, put the shortest one first.
- The matching should probably be case insensitive unless there are two options that differ only by case. In that case (pun intended), prefer the one that more closely matches the user’s input.
 */
// Recursive PHP program to check // if a string is subsequence of // another string
// A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements
//
// Input: str1 = "AXY", str2 = "ADXCPY"
// Output: True (str1 is a subsequence of str2)
//
// Input: str1 = "AXY", str2 = "YADXCP"
// Output: False (str1 is not a subsequence of str2)
//
// Input: str1 = "gksrek", str2 = "geeksforgeeks"
// Output: True (str1 is a subsequence of str2)
//
// Returns true if str1[] is
// a subsequence of str2[].
// m is length of str1 and n
// is length of str2
function str_is_subsequence($str1, $str2, $m = null, $n = null) {
    if (is_null($m)) {
        $m = strlen($str1);
    }
    if (is_null($n)) {
        $n = strlen($str2);
    }
    // For index of str1
    $j = 0;
    // Traverse str2 and str1,
    // and compare current
    // character of str2 with
    // first unmatched char of
    // str1, if matched then
    // move ahead in str1
    for ($i = 0; $i < $n && $j < $m; $i++) {
        if ($str1[$j] == $str2[$i]) {
            $j++;
        }
    }
    // If all characters of
    // str1 were found in str2
    return ($j == $m);
}
// TODO: espande un tempalte command con i dati passati a commandline
function expand($command, string $json_str = ''): string {
    if (is_string($command)) {
        // ok
    } elseif (is_object($command)) {
        $command = $command->__toString();
    } else {
        echo '<pre>' . __FUNCTION__ . '()' . ' L:' . __LINE__ . ' F:' . __FILE__ . "\n", var_dump(
            gettype($command)
        ), "</pre>\n";die(); // debug_print_backtrace()
    }
    if (empty($json_str)) {
        return $command;
    } else {
        return tmpl($command, coalesce([1], json_decode($json_str)));
    }
}
//
function tmpl($tmpl, array $get_defined_vars) {
    return strtr($tmpl, $vars = array_map_keys($get_defined_vars, function ($k) {
        return sprintf('{{%s}}', $k);
    }));
}
/*
collezione di comandi richiamabili da cli
TODO:
- ricerca nel wiki se non trova in locale
- template commands with {{var}} sostituita con il contenuto di --var=value
 */
class Command {
    function __construct(string $cmd, string $description = '') {
        $this->cmd = $cmd;
        $this->description = $description;
    }
    //
    function __toString(): string {
        // todo: interpolate templates veriables {{var}} from --var=value
        return sprintf("%s\n%s", $this->cmd,
            (
                !empty($this->description) ?
                sprintf('description:%s', $this->description) :
                ''
            )
        );
    }
}
// stampa key che sono alias
class Alias extends Command {
    function __toString(): string {
        return sprintf("Alias @see %s", $this->cmd);
    }
}
//
function alias_create($msg) {
    return new Alias($msg);
}
//----------------------------------------------------------------------------
// load the dict
//----------------------------------------------------------------------------
$commands_linux = include __DIR__ . '/memory_dict_linux.php';
$commands_AS400 = include __DIR__ . '/memory_dict_AS400.php';
$commands_etc = include __DIR__ . '/memory_dict_etc.php';
$commands_DEV = include __DIR__ . '/memory_dict_DEV.php';
$h_args = CLI::getConsoleArgs($argv);
$dict = strtolower(h_get($h_args, 'dict', 'all'));
switch ($dict) {
case 'linux':
    $commands = $commands_linux;
    break;
case 'as400':
    $commands = $commands_AS400;
    break;
case 'etc':
    $commands = $commands_etc;
    break;
case 'dev':
    $commands = $commands_DEV;
    break;
case 'all':
    $commands = array_merge($commands_linux, $commands_AS400, $commands_etc, $commands_DEV);
    break;
default:
    die(implode('/', [__FUNCTION__, __METHOD__, __LINE__]) . ' > invalid dict ' . $dict);
    break;
}
// post process
ksort($commands); //in-place sort!
foreach ($commands as $key => $str) {
    // ensure ther is a lowercase key for the command
    unset($commands[$key]);
    $commands[strtolower($key)] = $str;
}
echo "loaded " . count($commands) . " keys from dict: $dict \n";
//----------------------------------------------------------------------------
// actions
//----------------------------------------------------------------------------
function action_usage($argv) {
    return <<<__END__
uso:
    {$argv[0]} list  => list keys
    {$argv[0]} [key] => get a command
    {$argv[0]} [key] --dict=[linux|as400|etc|dev|all]    => get form specific dict
    {$argv[0]} key json_data => get a command expanded for data
il primo argomento viene utilizzato per cercare un comando nel dizionario\n\n
__END__;
}
//
//
function process_lev(array $words, string $input): string{
    // no shortest distance found, yet
    $shortest = -1;
    // loop through words to find the closest
    foreach ($words as $word) {
        // calculate the distance between the input word,
        // and the current word
        $lev = levenshtein($input, $word);
        // check for an exact match
        if ($lev == 0) {
            // closest word is this one (exact match)
            $closest = $word;
            $shortest = 0;
            // break out of the loop; we've found an exact match
            break;
        }
        // if this distance is less than the next found shortest
        // distance, OR if a next shortest word has not yet been found
        if ($lev <= $shortest || $shortest < 0) {
            // set the closest match, and shortest distance
            $closest = $word;
            $shortest = $lev;
        }
    }
    if ($shortest == 0) {
        // questo caso è gestito da substr
        return "searching Levenshtein Exact match found: $closest\n";
    } else {
        return "searching Levenshtein for '$input' in keys:\n" .
        (
            !empty($closest) ?
            CLI::getColoredString($closest)
            : CLI::getColoredString('no result', 'red')
        ) . "\n";
    }
}
//------------------------------------------------------------------------------
//  main
//------------------------------------------------------------------------------
$action = isset($argv[1]) ? $argv[1] : '';
$action = strtolower($action); // all keys tolower
//
$json_data = ''; // TODO: read json data
if (empty($action)) {
    die(action_usage($argv));
} else {
    if ('list' == $action) {
        $k_commands = array_keys($commands);
        sort($k_commands);
        foreach ($k_commands as $key) {
            echo "$key \n";
        }
    } elseif ('all' == $action) {
        foreach ($commands as $key => $text) {
            echo $key . "\n";
            echo indent($text) . "\n";
        }
    } elseif (isset($commands[$action])) {
        // exact match
        // echo "astring" | xclip  -selection clipboard
        // shift+ins per fare paste
        //$cmd_str = $commands[$action]->cmd;
        //echo " echo \"$cmd_str\" | xclip -i "."\n\n";
        echo CLI::printc(sprintf('Key foud: %s', $action)) . "\n";
        echo indent(expand($commands[$action], $json_data)) . "\n";
    } else {
        $c = 0;
        $str_search = $action;
        echo "searching sustr in keys:\n";
        foreach (array_keys($commands) as $key) {
            if (str_contains($key, $str_search)) {
                $c++;
                echo CLI::printc("substr k: '$str_search' found in '$key' ") . "\n";
            }
        }
        if ($c == 0) {
            echo CLI::printc("no k substr found", 'red') . "\n";
        }
        hr();
        // searching sustr in text:;
        $txt = "searching sustr in text:\n";
        $c = 0;
        foreach ($commands as $key => $text) {
            if (str_contains('' . $text, $str_search)) {
                $txt .= CLI::printc("substr '$str_search' found in text for key = '$key' ") . "\n";
                $txt .= indent($text, $str_search) . "\n";
                $c++;
            }
        }
        if ($c) {
            echo $txt;
        } else {
            echo CLI::printc("no substring found in txt ", 'red') . "\n";
        }
        hr();
        echo process_lev(array_keys($commands), $str_search);
        echo "\n";
        hr();
        echo "usa: memory wiki_search per cercare nel WIKI\n";
    }
}
