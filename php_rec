#!/usr/bin/env php
<?php



function generate_rec($vars){
    if( empty($vars) ) {
        return '';
    }
    $s_members = generate_prop_def($vars);
    $init_members = generate_prop_init($vars); 
    $code = <<<'__END__'

// mantiene i valori in un Record, valida i valori passati
// eventuali formattazioni o elaborazioni sui dati
// permette il controllo di accesso sui mebri pubblici privati
class {name}ValRec {
{{s_members}}
    // copia i valori delle prop dell'oggetto dall'array,
    // le prop non definite dell'ogetto saranno scartate
    function __construct(array $values) {
        /*$R = new ReflectionClass($this);
        $a_props = $R->getProperties(ReflectionProperty::IS_PUBLIC | ReflectionProperty::IS_PROTECTED);
        foreach ($a_props as $prop) {
            $n = $prop->getName();
            if( isset( $values[$n] ) ){
                $this->{$n} = $values[$n];
            }
        }*/ 
        {{init_members}}
        $this->validate();
    }
    // valida stato interno del record
    public function validate(){
        return true;
    }
    // auto implementa get{property}()
    public function __call($name, $arguments) {
        // Note: value of $name is case sensitive.
        echo __CLASS__."Calling object method '$name' " . print_r( $arguments, 1). "\n";
    }
    public function __toString(){
        return __CLASS__;
    }
}
__END__;
    $code = str_template($code, ['s_members' => $s_members, 'init_members'=>$init_members ]);
    return $code."\n\n\n";
}

function generate_prop_def($vars){
    $t = str_repeat(' ',4);
    $vars2 = array_map(function($v) use($t) {
        return $t.'protected $'.$v.';';
    }, $vars);
    $s = implode("\n", $vars2 );
    return $s;
}

function generate_prop_init($vars) {
    $t = str_repeat(' ',8);
    $vars2 = array_map(function($v) use($t) {
        return $t.' if( isset($values["'.$v.'"]) ) $this->'.$v.' = $values["'.$v.'"];';
    }, $vars);
    $s = implode("\n", $vars2 );
    return "\n".$s;
}


function action_usage(){
    return $html = <<<__END__
    specifica lista di proprietÃ  da generare
    {$_SERVER['argv'][0]} aa bb cc


__END__;

}
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
//
// data una stringa interpola i valori passati in this->binds nei segnaposto
// espressi con la sintassi {{nome_var}}
function str_template($str_template, $a_binds, $default_sub='__') {
    $substitute = function ($buffer, $name, $val) {
        $reg = sprintf('{{%s}}', $name );
        $reg = preg_quote($reg, '/');
        return preg_replace('/'.$reg.'/i', $val, $buffer);
    };
    $cleanUnusedVars = function ($buffer) use($default_sub) {
        return preg_replace('/\{\{[a-zA-Z0-9_]*\}\}/i', $default_sub, $buffer );
    };
    $buffer = $str_template;
    foreach ($a_binds as $name => $val) {
        $buffer = $substitute($buffer,$name, $val);
    }
    $buffer = $cleanUnusedVars($buffer);
    return $buffer;
}



//----------------------------------------------------------------------------
//  main
//----------------------------------------------------------------------------

$vars = $_SERVER['argv'];
unset( $vars[0] );
if( empty($vars) ) {
    echo action_usage();
} else {
    $code = generate_rec($vars);
    echo $code;

}

