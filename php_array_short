#!/usr/bin/env php
<?php
declare (strict_types = 1);
/**
 * Converts between array() and [] used by PHP 5.4
 *
 * @author     David Grudl (https://davidgrudl.com)
 */
$args = $_SERVER['argv'];
/*
if (isset($args[1])) {
$path = $args[$tmp];
if (is_file($path)) {
$iterator = array($path);
} elseif (is_dir($path)) {
$iterator = new CallbackFilterIterator(new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path)), function ($file) {
return $file->isFile() && in_array($file->getExtension(), ['php', 'phpt', 'phtml'], true);
});
} else {
echo "Path $path not found.\n";
die(1);
}
foreach ($iterator as $file) {
echo $file;
$orig = file_get_contents($file);
$res = convertArraysToSquareBrackets($orig);
if ($orig !== $res) {
echo " (changed)";
file_put_contents($file, $res);
}
echo "\n";
}
}  */
/*
// libe based processing
$_read_STDIN = function(){
$txt = '';
$fh = STDIN;
// getting a buffer
while (($buffer = fgets($fh, 4096)) !== false) {
$txt .= $buffer;
}
// line processing
while( !feof($fh) ) {
$s_line = trim(fgets($fh));
line_process($s_line);
}
};*/
$str_content = file_get_contents('php://stdin');
if (strlen($str_content)) {
    $code1 = convertArraysToSquareBrackets($str_content);
    $code2 = strip_empty_lines($code1);
    echo $code2;
} else {
    echo "
Convertor for PHP 5.4 arrays
----------------------------
Usage: {$args[0]} [-r|--reverse] [<directory> | <file>] (or STDIN is used)
";
    die(1);
}
function convertArraysToSquareBrackets($code) {
    $out = '';
    $brackets = [];
    $tokens = token_get_all($code);
    for ($i = 0; $i < count($tokens); $i++) {
        $token = $tokens[$i];
        if ($token === '(') {
            $brackets[] = false;
        } elseif ($token === ')') {
            $token = array_pop($brackets) ? ']' : ')';
        } elseif (is_array($token) && $token[0] === T_ARRAY) {
            $a = $i + 1;
            if (isset($tokens[$a]) && $tokens[$a][0] === T_WHITESPACE) {
                $a++;
            }
            if (isset($tokens[$a]) && $tokens[$a] === '(') {
                $i = $a;
                $brackets[] = true;
                $token = '[';
            }
        }
        $out .= is_array($token) ? $token[1] : $token;
    }
    return $out;
}
function strip_empty_lines($code) {
    $txt = '';
    $a_lines = explode(PHP_EOL, $code);
    // $a_words = preg_split( '/\s/', $str_text );// come explode(' ') ma piÃ¹ generico
    foreach ($a_lines as $i => $line) {
        $line = rtrim($line, ' ');
        if (!empty($line)) {
            $txt .= $line . PHP_EOL;
        }
    }
    return $txt;
}
