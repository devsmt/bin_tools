#!/usr/bin/env php
<?php
declare (strict_types = 1);
require_once __DIR__ . '/Utils.php';
function e(string $cmd, bool $v = false) {
    if ($v) {
        echo "cmd: " . $cmd . "\n";
    }
    $r = `$cmd` . "\n";
    if ($v) {
        echo $r . "\n";
    }
    return $r;
}
function str_begins(string $str, string $s_begin): bool{
    $len = mb_strlen($s_begin);
    $sub = mb_substr($str, 0, $len);
    return mb_strtolower($sub) === mb_strtolower($s_begin);
}
// test software version
if (strtolower(PHP_SAPI) !== 'cli') {
    die('use as CLI. ' . PHP_SAPI . "\n");
} else {
    if (!defined('PHP_VERSION_ID')) {
        die('php version not defined PHP_VERSION_ID');
    }
    if (PHP_VERSION_ID <= 70000) {
        die('questo formatter richiede php7!');
    }
    if (PHP_VERSION_ID >= 80000) {
        //echo ('PHP8 non supportato al mometo, userò php7 ' . PHP_EOL);
    }
}
// php8 non è ancora supportato
if (PHP_VERSION_ID == 80000) {
    $php_exe = '/usr/bin/php7.4';
} else {
    $php_exe = '/usr/bin/php';
}
// quote helper
$_q = function ($p) {
    return "'$p'";
};

//----------------------------------------------------------------------------
//  main()
//----------------------------------------------------------------------------
$_1 = $argv[1];
//
// do lint before
//
// copy paste detector
$php_l = e($php_exe . ' -l ' . $_q($_1) . ' 2>&1 ', $v = false);
$php_l = trim($php_l);
if (!empty($php_l)) {
    if (str_begins($php_l, 'No syntax errors detected in')) {
        // ok, continue
    } else {
        echo $php_l . "\n";
        die('exiting ' . basename(__FILE__) . PHP_EOL);
    }
}

// disponibile php_beautifier
// https://github.com/Shaked/php.tools
// echo "php.tools fmt:";
$fmt_path = '/data/usr_local_bin/php.tools/fmt.php';
// $fmt_path = '/data/usr_local_bin/php.tools/fmt_taz_18-11-2020.php';// non funziona ha un problema dato dai cicli while each sostituiti con foreach
// --lint-before
e($php_exe . ' ' . $fmt_path . '  --indent_with_space=4  ' . $_q($_1) . ' 2>&1 '); // bash $@
// do file uses old syntax?
$lines = shell_exec("grep -n \" array(\" $_1 ");
$lines = $lines ? trim($lines) : $lines;
if (!empty($lines)) {
    echo "old array() synstax found:\n";
    echo '>> ' . $lines . "\n";
    echo ">> cat $_1 | php_array_short > $_1 \n";
}

// TODO: remove empty lines

// --exclude=WrongConstructorName
// --list
// ShortArray
// RemoveIncludeParentheses
// DoubleToSingleQuote
// SpaceBetweenMethods
// echo "run php /usr/local/bin/php.tools/fmt.phar --selfupdate"
// https://github.com/phpfmt/fmt/blob/master/fmt.phar
// https://github.com/phpfmt/fmt/blob/51d48a2fe0c0664a837dee54b9eace6ef755055c/fmt.phar
//
// curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar
// phpcs --version
// php /data/bin_tools/phpcs.phar --standard=PSR1   "$@"

// copy paste detector
$cpd_r = e($cmd = '/usr/bin/phpcpd  --no-ansi --no-interaction ' . $_q($_1) . ' 2>&1 ', $v = false);
if (!empty($cpd_r)) {
    echo "\n" . "Copy Paste Detector:\n";
    $cpd_r = trim($cpd_r);
    $cpd_r = str_replace('phpcpd 4.1.0 by Sebastian Bergmann.', '', $cpd_r);
    $cpd_r = preg_replace($regex = '/Time: ([0-9]*) ms, Memory: ([0-9.]*) MB/i', '', $cpd_r);
    $cpd_r = trim($cpd_r);
    echo $cpd_r . "\n";
}

// phpcs tests.php --report-full --standard=PSR2
// cleancode, codesize, controversial, design, naming,
// Controversial is all about camelcase everywhere
$md_r = e($cmd = "phpmd " . $_q($_1) . " text unusedcode,codesize,naming,design,cleancode   ", false);
$md_r = trim($md_r);
if (!empty($md_r)) {
    echo "\n" . "Mess Detector:\n";
    $a_lines = explode("\n", $md_r);

    // togli avvertimenti che non mi interessano
    $a_lines = array_values(array_filter($a_lines, function ($line) {
        // false will be skipped
        if (
            str_contains($line, 'Avoid unused local variables')
            || str_contains($line, 'Avoid unused parameters such as')
            || str_contains($line, 'Avoid variables with short names like')
            || str_contains($line, 'Avoid excessively long variable names like')
            || str_contains($line, 'calls the typical debug function ')
            || str_contains($line, 'Avoid using static access to class ')
            || str_contains($line, 'Missing class import via use statement ')
            || str_contains($line, 'uses an else expression.')
            || str_contains($line, 'contains an exit expression.')
            || str_contains($line, 'Avoid using undefined variables such as')
            || str_contains($line, 'has a boolean flag argument ')
        ) {
            return false;
        }
        return true; // ok print
    }));
    foreach ($a_lines as $line) {
        echo "$line \n";
    }

    // echo 'PHPMD' . "\n";
    // echo $md_r . "\n";
}
if ($phploc = false) {
    $loc_r = e("phploc " . $_q($_1) . "  ", false);
    $loc_r = trim($loc_r);
    if (!empty($loc_r)) {
        echo "\n" . "LOC:\n";
        $loc_r = trim($loc_r);
        $loc_r = str_replace('phploc 5.0.0 by Sebastian Bergmann.', '', $loc_r);
        echo $loc_r . "\n";
    }
}

exit(0);
